<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.test.dao.rim.MainDao">

    <!-- JobPostDTO ResultMap -->
    <resultMap id="jobPostResultMap" type="com.example.test.dto.rim.main.MainDTO$JobPostDTO">
        <id property="jobPostNo" column="jobPostNo"/>
        <result property="companyName" column="companyName"/>
        <result property="companyImage" column="companyImage"/>
        <result property="title" column="title"/>
        <result property="location" column="postAddress"/>
        <result property="career" column="jobHistory"/>
        <result property="education" column="educationCode"/>
        <result property="jobSalary" column="jobSalary"/>
        <result property="endDate" column="endDate"/>
        <result property="scrapCount" column="scrapCount"/>
        <result property="isScraped" column="isScraped"/>
        <result property="postThumbnail" column="postThumbnail"/>
        <collection property="skillCodes" ofType="string" column="jobPostNo" 
                    select="findSkillCodesByJobPostNo"/>
        <collection property="benefits" ofType="string" column="jobPostNo" 
                    select="findBenefitsByJobPostNo"/>
    </resultMap>

    <!-- CompanyDTO ResultMap -->
    <resultMap id="companyResultMap" type="com.example.test.dto.CompanyDTO">
        <id property="companyId" column="companyId"/>
        <result property="companyName" column="companyName"/>
        <result property="companyImage" column="companyImage"/>
        <result property="companyAddress" column="companyAddress"/>
        <result property="companyWebsite" column="companyWebsite"/>
        <result property="companyEmployee" column="companyEmployee"/>
        <result property="companyProfit" column="companyProfit"/>
        <result property="avgRating" column="avgRating"/>
        <result property="reviewCount" column="reviewCount"/>
        <result property="likeCount" column="likeCount"/>
    </resultMap>

    <!-- DashboardDTO ResultMap -->
    <resultMap id="dashboardResultMap" type="com.example.test.dto.rim.main.MainDTO$DashboardDTO">
        <association property="stats" javaType="com.example.test.dto.rim.main.MainDTO$DashboardDTO$StatsDTO">
            <result property="inProgress" column="waitingCount"/>
            <result property="accepted" column="passCount"/>
            <result property="rejected" column="failCount"/>
            <result property="total" column="totalCount"/>
        </association>
        <collection property="recentApplications" ofType="com.example.test.dto.rim.main.MainDTO$DashboardDTO$ApplicationDTO">
            <result property="companyName" column="companyName"/>
            <result property="postTitle" column="postTitle"/>
            <result property="applyDate" column="applyDate"/>
            <result property="passYn" column="passYn"/>
        </collection>
    </resultMap>

    <!-- CompanyProfileDTO ResultMap -->
    <resultMap id="companyProfileResultMap" type="com.example.test.dto.rim.main.MainDTO$CompanyProfileDTO">
        <result property="companyId" column="companyId"/>
        <result property="companyName" column="companyName"/>
        <result property="companyImage" column="companyImage"/>
        <result property="companyAddress" column="companyAddress"/>
        <result property="companyWebsite" column="companyWebsite"/>
        <result property="companyEmployee" column="companyEmployee"/>
        <result property="companyProfit" column="companyProfit"/>
    </resultMap>

    <!-- CompanyRatingDTO ResultMap -->
    <resultMap id="companyRatingResultMap" type="com.example.test.dto.rim.main.MainDTO$CompanyRatingDTO">
        <result property="averageRating" column="avgRating"/>
        <result property="reviewCount" column="reviewCount"/>
        <collection property="ratingDistribution" column="companyId" select="findRatingDistribution"/>
        <collection property="recentReviews" ofType="com.example.test.dto.rim.main.MainDTO$ReviewDTO">
            <result property="score" column="score"/>
            <result property="userId" column="userId"/>
            <result property="scoreDate" column="scoreDate"/>
        </collection>
    </resultMap>

    <!-- 기업 프로필 조회 -->
    <select id="findCompanyProfile" resultMap="companyProfileResultMap">
        SELECT 
            companyId,
            companyName,
            companyImage,
            companyAddress,
            companyWebsite,
            companyEmployee,
            companyProfit
        FROM tblCompany
        WHERE companyId = #{companyId}
    </select>

    <!-- 기업 평점 정보 조회 -->
    <select id="findCompanyRating" resultMap="companyRatingResultMap">
        SELECT 
            c.companyId,
            (SELECT AVG(score) FROM tblCompanyScore WHERE companyId = c.companyId) as avgRating,
            (SELECT COUNT(DISTINCT userId) FROM tblCompanyScore WHERE companyId = c.companyId) as reviewCount,
            cs.score,
            cs.userId,
            cs.scoreDate
        FROM tblCompany c
        LEFT JOIN (
            SELECT *
            FROM tblCompanyScore
            WHERE companyId = #{companyId}
            ORDER BY scoreDate DESC
            LIMIT 5
        ) cs ON c.companyId = cs.companyId
        WHERE c.companyId = #{companyId}
    </select>

    <!-- 평점 분포 조회 -->
    <select id="findRatingDistribution" resultType="int">
        SELECT 
            COUNT(*)
        FROM tblCompanyScore
        WHERE companyId = #{companyId}
        GROUP BY score
        ORDER BY score
    </select>

    <!-- 채용 현황 통계 조회 -->
    <select id="findRecruitmentStats" resultType="com.example.test.dto.rim.main.MainDTO$RecruitmentStatsDTO">
        SELECT 
            COUNT(CASE WHEN jp.endDate > NOW() THEN 1 END) as activePostings,
            COUNT(CASE WHEN ah.readYn = 'N' THEN 1 END) as unreadResumes,
            COUNT(CASE WHEN ah.aplcHstrDate >= DATE_SUB(NOW(), INTERVAL 30 DAY) THEN 1 END) as totalApplications30Days,
            COUNT(CASE WHEN ah.passYn = 'Y' AND ah.aplcHstrDate >= DATE_SUB(NOW(), INTERVAL 30 DAY) THEN 1 END) as passCount30Days,
            COUNT(CASE WHEN ah.passYn = 'N' AND ah.aplcHstrDate >= DATE_SUB(NOW(), INTERVAL 30 DAY) THEN 1 END) as failCount30Days,
            COUNT(CASE WHEN ah.passYn = 'W' AND ah.aplcHstrDate >= DATE_SUB(NOW(), INTERVAL 30 DAY) THEN 1 END) as waitingCount30Days
        FROM tblCompany c
        LEFT JOIN tblJobPost jp ON c.companyId = jp.companyId
        LEFT JOIN tblAplcHstr ah ON jp.jobPostNo = ah.jobPostNo
        WHERE c.companyId = #{companyId}
    </select>

    <!-- 
        인기 채용공고 조회
        - 목적: 메인페이지에 노출할 인기있는 채용공고 8개를 조회
        - 조회 조건:
          1. 마감되지 않은 공고 (endDate > NOW())
          2. 게시 상태인 공고 (postViewYn = 'Y') 
          3. 삭제되지 않은 공고 (deleteYn = 'N')
        - 정렬 기준: 
          1. 마감일자 오름차순 (빨리 마감되는 순)
          2. 지원자수 내림차순 (지원이 많은 순)
        - 반환 데이터:
          1. 공고 기본정보 (번호,제목,연봉,마감일,주소,경력,학력,썸네일)
          2. 기업정보 (회사명, 로고)
          3. 통계정보 (지원자수, 스크랩수)
          4. 사용자 관련정보 (스크랩여부)
    -->
    <select id="findPopularPosts" resultMap="jobPostResultMap">
        SELECT 
            jp.jobPostNo, jp.title, jp.jobSalary, jp.endDate, jp.postAddress,
            jp.jobHistory, jp.educationCode, jp.postThumbnail,
            c.companyName, c.companyImage,
            COUNT(DISTINCT ah.resumeNo) as applicationCount,
            COUNT(DISTINCT j.userId) as scrapCount,
            false as isScraped
        FROM tblJobPost jp
        JOIN tblCompany c ON jp.companyId = c.companyId
        LEFT JOIN tblAplcHstr ah ON jp.jobPostNo = ah.jobPostNo
        LEFT JOIN tblJpl j ON jp.jobPostNo = j.jobPostNo
        WHERE jp.endDate > NOW()
        AND jp.postViewYn = 'Y'
        AND jp.deleteYn = 'N'
        GROUP BY 
            jp.jobPostNo, 
            jp.title, 
            jp.jobSalary, 
            jp.endDate, 
            jp.postAddress,
            jp.jobHistory, 
            jp.educationCode, 
            jp.postThumbnail,
            c.companyName, 
            c.companyImage
        ORDER BY jp.endDate ASC, applicationCount DESC
        LIMIT 8
    </select>

    <!-- 구직자 대시보드 통계 -->
    <select id="findJobSeekerDashboard" resultType="com.example.test.dto.rim.main.MainDTO$DashboardDTO$StatsDTO">
        SELECT 
            COUNT(CASE WHEN h.passYn = 'W' THEN 1 END) as inProgress,
            COUNT(CASE WHEN h.passYn = 'Y' THEN 1 END) as accepted,
            COUNT(CASE WHEN h.passYn = 'N' THEN 1 END) as rejected,
            COUNT(*) as total
        FROM tblAplcHstr h
        JOIN tblResume r ON h.resumeNo = r.resumeNo
        WHERE r.userId = #{userId}
    </select>

    <!-- 최근 지원 내역 -->
    <select id="findRecentApplications" resultType="com.example.test.dto.rim.main.MainDTO$DashboardDTO$ApplicationDTO">
        SELECT 
            c.companyName,
            jp.title as postTitle,
            ah.aplcHstrDate as applyDate,
            ah.passYn
        FROM tblAplcHstr ah
        JOIN tblJobPost jp ON ah.jobPostNo = jp.jobPostNo
        JOIN tblCompany c ON jp.companyId = c.companyId
        WHERE ah.resumeNo IN (
            SELECT resumeNo 
            FROM tblResume 
            WHERE userId = #{userId}
        )
        AND ah.aplcHstrDate BETWEEN DATE_SUB(NOW(), INTERVAL 30 DAY) AND NOW()
        ORDER BY ah.aplcHstrDate DESC
    </select>

    <!-- 맞춤 추천 공고 -->
    <!-- 
    이 쿼리는 사용자에게 맞춤형 채용공고를 추천하는 기능을 수행합니다.
    
    주요 기능:
    1. 사용자의 이력서에 등록된 기술스택과 일치하는 채용공고를 찾습니다
    2. 각 채용공고별로 일치하는 기술스택 수를 계산합니다 (matchingSkillCount)
    3. 사용자가 스크랩한 공고인지 여부를 확인합니다 (isScraped)
    
    조인 설명:
    - tblJobPost(jp): 채용공고 기본 정보
    - tblCompany(c): 회사 정보 
    - tblJobPostSkill(jps): 채용공고가 요구하는 기술스택
    - tblResumeSkill(rs): 사용자 이력서의 기술스택
    - tblResume(r): 사용자 이력서
    
    정렬 기준:
    1. 일치하는 기술스택이 많은 순서 (matchingSkillCount DESC)
    2. 마감일이 빠른 순서 (jp.endDate ASC)
    
    제한사항:
    - 마감되지 않은 공고만 표시 (endDate > NOW())
    - 공개된 공고만 표시 (postViewYn = 'Y')
    - 삭제되지 않은 공고만 표시 (deleteYn = 'N')
    - 최대 8개까지만 표시 (LIMIT 8)
    -->
    <select id="findRecommendedPosts" resultMap="jobPostResultMap">
        SELECT DISTINCT 
            jp.jobPostNo, jp.title, jp.jobSalary, jp.endDate, jp.postAddress,
            jp.jobHistory, jp.educationCode, jp.postThumbnail,
            c.companyName, c.companyImage,
            COUNT(DISTINCT jps.skillCode) as matchingSkillCount,
            EXISTS (
                SELECT 1 FROM tblJpl jpl 
                WHERE jpl.jobPostNo = jp.jobPostNo 
                AND jpl.userId = #{userId}
            ) as isScraped
        FROM tblJobPost jp
        JOIN tblCompany c ON jp.companyId = c.companyId
        JOIN tblJobPostSkill jps ON jp.jobPostNo = jps.jobPostNo
        JOIN tblResumeSkill rs ON jps.skillCode = rs.skillCode
        JOIN tblResume r ON rs.resumeNo = r.resumeNo
        WHERE r.userId = #{userId}
        AND jp.endDate > NOW()
        AND jp.postViewYn = 'Y'
        AND jp.deleteYn = 'N'
        GROUP BY 
            jp.jobPostNo, 
            jp.title, 
            jp.jobSalary, 
            jp.endDate, 
            jp.postAddress,
            jp.jobHistory, 
            jp.educationCode, 
            jp.postThumbnail,
            c.companyName, 
            c.companyImage
        ORDER BY matchingSkillCount DESC, jp.endDate ASC
        LIMIT 8
    </select>

    <!-- 마감 임박 공고 -->
    <select id="findDeadlinePosts" resultMap="jobPostResultMap">
        SELECT 
            jp.jobPostNo, jp.title, jp.jobSalary, jp.endDate, jp.postAddress,
            jp.jobHistory, jp.educationCode, jp.postThumbnail,
            c.companyName, c.companyImage,
            EXISTS (
                SELECT 1 FROM tblJpl jpl 
                WHERE jpl.jobPostNo = jp.jobPostNo 
                AND jpl.userId = #{userId}
            ) as isScraped
        FROM tblJobPost jp
        JOIN tblCompany c ON jp.companyId = c.companyId
        JOIN tblLike l ON c.companyId = l.companyId
        WHERE l.userId = #{userId}
        AND l.likeType = 'C'
        AND jp.endDate > NOW()
        AND jp.postViewYn = 'Y'
        AND jp.deleteYn = 'N'
        AND DATEDIFF(jp.endDate, NOW()) BETWEEN 0 AND 7
        GROUP BY 
            jp.jobPostNo, 
            jp.title, 
            jp.jobSalary, 
            jp.endDate, 
            jp.postAddress,
            jp.jobHistory, 
            jp.educationCode, 
            jp.postThumbnail,
            c.companyName, 
            c.companyImage
        ORDER BY jp.endDate ASC
        LIMIT 4
    </select>

    <!-- 인기 기술스택 -->
    <select id="findPopularSkills" resultType="com.example.test.dto.rim.main.MainDTO$PopularSkillDTO">
        SELECT 
            g.name as skillName,
            COUNT(DISTINCT jp.jobPostNo) as postCount
        FROM tblJobPostSkill js
        JOIN tblGubn g ON js.skillCode = g.code
        JOIN tblJobPost jp ON js.jobPostNo = jp.jobPostNo
        WHERE g.groupCode = 'SKILL'
        AND jp.endDate > NOW()
        AND jp.postViewYn = 'Y'
        AND jp.deleteYn = 'N'
        GROUP BY g.code, g.name
        ORDER BY postCount DESC
        LIMIT 3
    </select>

    <!-- 채용공고별 기술스택 -->
    <select id="findSkillCodesByJobPostNo" resultType="string">
        SELECT g.name
        FROM tblJobPostSkill js
        JOIN tblGubn g ON js.skillCode = g.code
        WHERE js.jobPostNo = #{jobPostNo}
        AND g.groupCode = 'SKILL'
        ORDER BY RAND()
        LIMIT 2
    </select>

    <!-- TOP 10 기업 조회 -->
    <select id="findTopCompanies" resultType="com.example.test.dto.CompanyDTO">
        SELECT 
            c.companyId,
            c.companyName,
            c.companyImage,
            COALESCE(AVG(cs.score), 0) as avgRating,
            COUNT(DISTINCT l.userId) as likeCount,
            (SELECT COUNT(*) 
             FROM tblJobPost jp 
             WHERE jp.companyId = c.companyId 
             AND jp.endDate BETWEEN CURDATE() AND '9999-12-31') as activeJobCount
        FROM 
            tblCompany c
            LEFT JOIN tblCompanyScore cs ON c.companyId = cs.companyId
            LEFT JOIN tblLike l ON c.companyId = l.companyId AND l.likeType = 'C'
        GROUP BY 
            c.companyId, c.companyName, c.companyImage
        ORDER BY 
            CASE 
                WHEN #{sortType} = 'rating' THEN AVG(cs.score)
                ELSE COUNT(DISTINCT l.userId)
            END DESC
        LIMIT 10
    </select>

    <!-- 스크랩 많은 공고 -->
    <select id="findMostScrapedPosts" resultMap="jobPostResultMap">
        SELECT 
            jp.jobPostNo, jp.title, jp.jobSalary, jp.endDate, jp.postAddress,
            jp.jobHistory, jp.educationCode, jp.postThumbnail,
            c.companyName, c.companyImage,
            COUNT(DISTINCT ah.resumeNo) as applicationCount,
            COUNT(DISTINCT j.userId) as scrapCount,
            EXISTS (
                SELECT 1 FROM tblJpl jpl 
                WHERE jpl.jobPostNo = jp.jobPostNo 
                AND jpl.userId = #{userId}
            ) as isScraped
        FROM tblJobPost jp
        JOIN tblCompany c ON jp.companyId = c.companyId
        LEFT JOIN tblAplcHstr ah ON jp.jobPostNo = ah.jobPostNo
        LEFT JOIN tblJpl j ON jp.jobPostNo = j.jobPostNo
        WHERE jp.endDate > NOW()
        AND jp.postViewYn = 'Y'
        AND jp.deleteYn = 'N'
        GROUP BY 
            jp.jobPostNo, 
            jp.title, 
            jp.jobSalary, 
            jp.endDate, 
            jp.postAddress,
            jp.jobHistory, 
            jp.educationCode, 
            jp.postThumbnail,
            c.companyName, 
            c.companyImage
        ORDER BY scrapCount DESC, jp.endDate ASC
        LIMIT 8
    </select>

    <!-- 채용공고별 복리후생 조회 -->
    <select id="findBenefitsByJobPostNo" resultType="string">
        SELECT benefitContent
        FROM tblBenefit
        WHERE jobPostNo = #{jobPostNo}
        ORDER BY RAND()
        LIMIT 1
    </select>

</mapper> 